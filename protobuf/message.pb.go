// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		message.proto

	It has these top-level messages:
		EntryHeader
		Index
		Entry
		EntryBody
		RowData
		Column
		Message
*/
package main

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_UNKNOWN EventType = 1
	EventType_INSERT  EventType = 2
	EventType_UPDATE  EventType = 3
	EventType_DELETE  EventType = 4
	EventType_RENAME  EventType = 5
	EventType_ALTER   EventType = 6
	EventType_CINDEX  EventType = 7
	EventType_DINDEX  EventType = 8
	EventType_CTABLE  EventType = 9
	EventType_DTABLE  EventType = 10
	// begin/commit
	EventType_QUERY     EventType = 11
	EventType_CDATABASE EventType = 12
	EventType_DDATABASE EventType = 13
	EventType_TRUNCATE  EventType = 14
)

var EventType_name = map[int32]string{
	1:  "UNKNOWN",
	2:  "INSERT",
	3:  "UPDATE",
	4:  "DELETE",
	5:  "RENAME",
	6:  "ALTER",
	7:  "CINDEX",
	8:  "DINDEX",
	9:  "CTABLE",
	10: "DTABLE",
	11: "QUERY",
	12: "CDATABASE",
	13: "DDATABASE",
	14: "TRUNCATE",
}
var EventType_value = map[string]int32{
	"UNKNOWN":   1,
	"INSERT":    2,
	"UPDATE":    3,
	"DELETE":    4,
	"RENAME":    5,
	"ALTER":     6,
	"CINDEX":    7,
	"DINDEX":    8,
	"CTABLE":    9,
	"DTABLE":    10,
	"QUERY":     11,
	"CDATABASE": 12,
	"DDATABASE": 13,
	"TRUNCATE":  14,
}

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}
func (x EventType) String() string {
	return proto1.EnumName(EventType_name, int32(x))
}
func (x *EventType) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(EventType_value, data, "EventType")
	if err != nil {
		return err
	}
	*x = EventType(value)
	return nil
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

type EntryType int32

const (
	EntryType_BEGIN  EntryType = 1
	EntryType_COMMIT EntryType = 2
	EntryType_DML    EntryType = 3
	EntryType_DDL    EntryType = 4
)

var EntryType_name = map[int32]string{
	1: "BEGIN",
	2: "COMMIT",
	3: "DML",
	4: "DDL",
}
var EntryType_value = map[string]int32{
	"BEGIN":  1,
	"COMMIT": 2,
	"DML":    3,
	"DDL":    4,
}

func (x EntryType) Enum() *EntryType {
	p := new(EntryType)
	*p = x
	return p
}
func (x EntryType) String() string {
	return proto1.EnumName(EntryType_name, int32(x))
}
func (x *EntryType) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(EntryType_value, data, "EntryType")
	if err != nil {
		return err
	}
	*x = EntryType(value)
	return nil
}
func (EntryType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

type MessageType int32

const (
	MessageType_FULL   MessageType = 1
	MessageType_FIRST  MessageType = 2
	MessageType_MIDDLE MessageType = 3
	MessageType_LAST   MessageType = 4
)

var MessageType_name = map[int32]string{
	1: "FULL",
	2: "FIRST",
	3: "MIDDLE",
	4: "LAST",
}
var MessageType_value = map[string]int32{
	"FULL":   1,
	"FIRST":  2,
	"MIDDLE": 3,
	"LAST":   4,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}
func (x MessageType) String() string {
	return proto1.EnumName(MessageType_name, int32(x))
}
func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{2} }

type EntryHeader struct {
	TpipeMessageOffset *int64  `protobuf:"varint,1,opt,name=tpipe_message_offset,json=tpipeMessageOffset" json:"tpipe_message_offset,omitempty"`
	DrcMessageId       *uint64 `protobuf:"varint,2,opt,name=drc_message_id,json=drcMessageId" json:"drc_message_id,omitempty"`
	// generate time
	Timestamp        *int64     `protobuf:"varint,3,req,name=timestamp" json:"timestamp,omitempty"`
	SourceClusterId  *uint64    `protobuf:"varint,5,req,name=source_cluster_id,json=sourceClusterId" json:"source_cluster_id,omitempty"`
	ServerId         *uint32    `protobuf:"varint,6,req,name=server_id,json=serverId" json:"server_id,omitempty"`
	DcId             *uint32    `protobuf:"varint,7,req,name=dc_id,json=dcId" json:"dc_id,omitempty"`
	StartExecuteTime *uint32    `protobuf:"varint,8,opt,name=start_execute_time,json=startExecuteTime" json:"start_execute_time,omitempty"`
	Database         *string    `protobuf:"bytes,9,opt,name=database" json:"database,omitempty"`
	Table            *string    `protobuf:"bytes,10,opt,name=table" json:"table,omitempty"`
	EntryType        *EntryType `protobuf:"varint,11,req,name=entry_type,json=entryType,enum=proto.EntryType" json:"entry_type,omitempty"`
	Indexes          []*Index   `protobuf:"bytes,12,rep,name=indexes" json:"indexes,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *EntryHeader) Reset()                    { *m = EntryHeader{} }
func (m *EntryHeader) String() string            { return proto1.CompactTextString(m) }
func (*EntryHeader) ProtoMessage()               {}
func (*EntryHeader) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func (m *EntryHeader) GetTpipeMessageOffset() int64 {
	if m != nil && m.TpipeMessageOffset != nil {
		return *m.TpipeMessageOffset
	}
	return 0
}

func (m *EntryHeader) GetDrcMessageId() uint64 {
	if m != nil && m.DrcMessageId != nil {
		return *m.DrcMessageId
	}
	return 0
}

func (m *EntryHeader) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *EntryHeader) GetSourceClusterId() uint64 {
	if m != nil && m.SourceClusterId != nil {
		return *m.SourceClusterId
	}
	return 0
}

func (m *EntryHeader) GetServerId() uint32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *EntryHeader) GetDcId() uint32 {
	if m != nil && m.DcId != nil {
		return *m.DcId
	}
	return 0
}

func (m *EntryHeader) GetStartExecuteTime() uint32 {
	if m != nil && m.StartExecuteTime != nil {
		return *m.StartExecuteTime
	}
	return 0
}

func (m *EntryHeader) GetDatabase() string {
	if m != nil && m.Database != nil {
		return *m.Database
	}
	return ""
}

func (m *EntryHeader) GetTable() string {
	if m != nil && m.Table != nil {
		return *m.Table
	}
	return ""
}

func (m *EntryHeader) GetEntryType() EntryType {
	if m != nil && m.EntryType != nil {
		return *m.EntryType
	}
	return EntryType_BEGIN
}

func (m *EntryHeader) GetIndexes() []*Index {
	if m != nil {
		return m.Indexes
	}
	return nil
}

type Index struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	ColumnIndex      []int32 `protobuf:"varint,2,rep,name=column_index,json=columnIndex" json:"column_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Index) Reset()                    { *m = Index{} }
func (m *Index) String() string            { return proto1.CompactTextString(m) }
func (*Index) ProtoMessage()               {}
func (*Index) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

func (m *Index) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Index) GetColumnIndex() []int32 {
	if m != nil {
		return m.ColumnIndex
	}
	return nil
}

type Entry struct {
	Header           *EntryHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Body             *EntryBody   `protobuf:"bytes,2,req,name=body" json:"body,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto1.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{2} }

func (m *Entry) GetHeader() *EntryHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Entry) GetBody() *EntryBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type EntryBody struct {
	Rowdatas  []*RowData `protobuf:"bytes,1,rep,name=rowdatas" json:"rowdatas,omitempty"`
	EventType *EventType `protobuf:"varint,2,req,name=event_type,json=eventType,enum=proto.EventType" json:"event_type,omitempty"`
	// begin or commit or ddl
	Sql              *string `protobuf:"bytes,3,opt,name=sql" json:"sql,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EntryBody) Reset()                    { *m = EntryBody{} }
func (m *EntryBody) String() string            { return proto1.CompactTextString(m) }
func (*EntryBody) ProtoMessage()               {}
func (*EntryBody) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{3} }

func (m *EntryBody) GetRowdatas() []*RowData {
	if m != nil {
		return m.Rowdatas
	}
	return nil
}

func (m *EntryBody) GetEventType() EventType {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return EventType_UNKNOWN
}

func (m *EntryBody) GetSql() string {
	if m != nil && m.Sql != nil {
		return *m.Sql
	}
	return ""
}

type RowData struct {
	BeforeImage      []*Column `protobuf:"bytes,1,rep,name=before_image,json=beforeImage" json:"before_image,omitempty"`
	AfterImage       []*Column `protobuf:"bytes,2,rep,name=after_image,json=afterImage" json:"after_image,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *RowData) Reset()                    { *m = RowData{} }
func (m *RowData) String() string            { return proto1.CompactTextString(m) }
func (*RowData) ProtoMessage()               {}
func (*RowData) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{4} }

func (m *RowData) GetBeforeImage() []*Column {
	if m != nil {
		return m.BeforeImage
	}
	return nil
}

func (m *RowData) GetAfterImage() []*Column {
	if m != nil {
		return m.AfterImage
	}
	return nil
}

type Column struct {
	Index   *int32  `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	Name    *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	IsPk    *bool   `protobuf:"varint,3,opt,name=is_pk,json=isPk" json:"is_pk,omitempty"`
	Updated *bool   `protobuf:"varint,4,opt,name=updated" json:"updated,omitempty"`
	// is nullable, not actually value
	IsNullable *bool `protobuf:"varint,5,opt,name=is_nullable,json=isNullable" json:"is_nullable,omitempty"`
	// whether value is null
	Null             *bool   `protobuf:"varint,6,req,name=null" json:"null,omitempty"`
	SqlType          *string `protobuf:"bytes,7,opt,name=sql_type,json=sqlType" json:"sql_type,omitempty"`
	Value            *string `protobuf:"bytes,8,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Column) Reset()                    { *m = Column{} }
func (m *Column) String() string            { return proto1.CompactTextString(m) }
func (*Column) ProtoMessage()               {}
func (*Column) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{5} }

func (m *Column) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *Column) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Column) GetIsPk() bool {
	if m != nil && m.IsPk != nil {
		return *m.IsPk
	}
	return false
}

func (m *Column) GetUpdated() bool {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return false
}

func (m *Column) GetIsNullable() bool {
	if m != nil && m.IsNullable != nil {
		return *m.IsNullable
	}
	return false
}

func (m *Column) GetNull() bool {
	if m != nil && m.Null != nil {
		return *m.Null
	}
	return false
}

func (m *Column) GetSqlType() string {
	if m != nil && m.SqlType != nil {
		return *m.SqlType
	}
	return ""
}

func (m *Column) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Message struct {
	// filled by importer
	TpipeMessageOffset *int64 `protobuf:"varint,1,opt,name=tpipe_message_offset,json=tpipeMessageOffset" json:"tpipe_message_offset,omitempty"`
	// filled by dumper
	DrcMessageId     *uint64      `protobuf:"varint,2,req,name=drc_message_id,json=drcMessageId" json:"drc_message_id,omitempty"`
	Type             *MessageType `protobuf:"varint,3,req,name=type,enum=proto.MessageType" json:"type,omitempty"`
	Payload          []byte       `protobuf:"bytes,4,req,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto1.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{6} }

func (m *Message) GetTpipeMessageOffset() int64 {
	if m != nil && m.TpipeMessageOffset != nil {
		return *m.TpipeMessageOffset
	}
	return 0
}

func (m *Message) GetDrcMessageId() uint64 {
	if m != nil && m.DrcMessageId != nil {
		return *m.DrcMessageId
	}
	return 0
}

func (m *Message) GetType() MessageType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return MessageType_FULL
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto1.RegisterType((*EntryHeader)(nil), "proto.EntryHeader")
	proto1.RegisterType((*Index)(nil), "proto.Index")
	proto1.RegisterType((*Entry)(nil), "proto.Entry")
	proto1.RegisterType((*EntryBody)(nil), "proto.EntryBody")
	proto1.RegisterType((*RowData)(nil), "proto.RowData")
	proto1.RegisterType((*Column)(nil), "proto.Column")
	proto1.RegisterType((*Message)(nil), "proto.Message")
	proto1.RegisterEnum("proto.EventType", EventType_name, EventType_value)
	proto1.RegisterEnum("proto.EntryType", EntryType_name, EntryType_value)
	proto1.RegisterEnum("proto.MessageType", MessageType_name, MessageType_value)
}
func (m *EntryHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TpipeMessageOffset != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.TpipeMessageOffset))
	}
	if m.DrcMessageId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.DrcMessageId))
	}
	if m.Timestamp == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.Timestamp))
	}
	if m.SourceClusterId == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.SourceClusterId))
	}
	if m.ServerId == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.ServerId))
	}
	if m.DcId == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.DcId))
	}
	if m.StartExecuteTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.StartExecuteTime))
	}
	if m.Database != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.Database)))
		i += copy(dAtA[i:], *m.Database)
	}
	if m.Table != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.Table)))
		i += copy(dAtA[i:], *m.Table)
	}
	if m.EntryType == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.EntryType))
	}
	if len(m.Indexes) > 0 {
		for _, msg := range m.Indexes {
			dAtA[i] = 0x62
			i++
			i = encodeVarintMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Index) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Index) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if len(m.ColumnIndex) > 0 {
		for _, num := range m.ColumnIndex {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMessage(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Body == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Body.Size()))
		n2, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EntryBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBody) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rowdatas) > 0 {
		for _, msg := range m.Rowdatas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.EventType == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.EventType))
	}
	if m.Sql != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.Sql)))
		i += copy(dAtA[i:], *m.Sql)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RowData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BeforeImage) > 0 {
		for _, msg := range m.BeforeImage {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AfterImage) > 0 {
		for _, msg := range m.AfterImage {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.Index))
	}
	if m.Name == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.IsPk != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsPk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Updated != nil {
		dAtA[i] = 0x20
		i++
		if *m.Updated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsNullable != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsNullable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Null == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x30
		i++
		if *m.Null {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SqlType != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.SqlType)))
		i += copy(dAtA[i:], *m.SqlType)
	}
	if m.Value != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.Value)))
		i += copy(dAtA[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TpipeMessageOffset != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.TpipeMessageOffset))
	}
	if m.DrcMessageId == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.DrcMessageId))
	}
	if m.Type == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(*m.Type))
	}
	if m.Payload == nil {
		return 0, new(proto1.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EntryHeader) Size() (n int) {
	var l int
	_ = l
	if m.TpipeMessageOffset != nil {
		n += 1 + sovMessage(uint64(*m.TpipeMessageOffset))
	}
	if m.DrcMessageId != nil {
		n += 1 + sovMessage(uint64(*m.DrcMessageId))
	}
	if m.Timestamp != nil {
		n += 1 + sovMessage(uint64(*m.Timestamp))
	}
	if m.SourceClusterId != nil {
		n += 1 + sovMessage(uint64(*m.SourceClusterId))
	}
	if m.ServerId != nil {
		n += 1 + sovMessage(uint64(*m.ServerId))
	}
	if m.DcId != nil {
		n += 1 + sovMessage(uint64(*m.DcId))
	}
	if m.StartExecuteTime != nil {
		n += 1 + sovMessage(uint64(*m.StartExecuteTime))
	}
	if m.Database != nil {
		l = len(*m.Database)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Table != nil {
		l = len(*m.Table)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.EntryType != nil {
		n += 1 + sovMessage(uint64(*m.EntryType))
	}
	if len(m.Indexes) > 0 {
		for _, e := range m.Indexes {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Index) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.ColumnIndex) > 0 {
		for _, e := range m.ColumnIndex {
			n += 1 + sovMessage(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Entry) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryBody) Size() (n int) {
	var l int
	_ = l
	if len(m.Rowdatas) > 0 {
		for _, e := range m.Rowdatas {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.EventType != nil {
		n += 1 + sovMessage(uint64(*m.EventType))
	}
	if m.Sql != nil {
		l = len(*m.Sql)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RowData) Size() (n int) {
	var l int
	_ = l
	if len(m.BeforeImage) > 0 {
		for _, e := range m.BeforeImage {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.AfterImage) > 0 {
		for _, e := range m.AfterImage {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Column) Size() (n int) {
	var l int
	_ = l
	if m.Index != nil {
		n += 1 + sovMessage(uint64(*m.Index))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.IsPk != nil {
		n += 2
	}
	if m.Updated != nil {
		n += 2
	}
	if m.IsNullable != nil {
		n += 2
	}
	if m.Null != nil {
		n += 2
	}
	if m.SqlType != nil {
		l = len(*m.SqlType)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.TpipeMessageOffset != nil {
		n += 1 + sovMessage(uint64(*m.TpipeMessageOffset))
	}
	if m.DrcMessageId != nil {
		n += 1 + sovMessage(uint64(*m.DrcMessageId))
	}
	if m.Type != nil {
		n += 1 + sovMessage(uint64(*m.Type))
	}
	if m.Payload != nil {
		l = len(m.Payload)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EntryHeader) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TpipeMessageOffset", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TpipeMessageOffset = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrcMessageId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrcMessageId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
			hasFields[0] |= uint64(0x00000001)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceClusterId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceClusterId = &v
			hasFields[0] |= uint64(0x00000002)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerId = &v
			hasFields[0] |= uint64(0x00000004)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DcId = &v
			hasFields[0] |= uint64(0x00000008)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartExecuteTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartExecuteTime = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Database = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Table = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryType", wireType)
			}
			var v EntryType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (EntryType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EntryType = &v
			hasFields[0] |= uint64(0x00000010)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexes = append(m.Indexes, &Index{})
			if err := m.Indexes[len(m.Indexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Index) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Index: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Index: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIndex = append(m.ColumnIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIndex = append(m.ColumnIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIndex", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &EntryHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &EntryBody{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryBody) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rowdatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rowdatas = append(m.Rowdatas, &RowData{})
			if err := m.Rowdatas[len(m.Rowdatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var v EventType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventType = &v
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sql = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeforeImage = append(m.BeforeImage, &Column{})
			if err := m.BeforeImage[len(m.BeforeImage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AfterImage = append(m.AfterImage, &Column{})
			if err := m.AfterImage[len(m.AfterImage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPk = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Updated = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNullable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsNullable = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Null", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Null = &b
			hasFields[0] |= uint64(0x00000004)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SqlType = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TpipeMessageOffset", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TpipeMessageOffset = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrcMessageId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DrcMessageId = &v
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v MessageType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto1.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto1.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("message.proto", fileDescriptorMessage) }

var fileDescriptorMessage = []byte{
	// 855 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcb, 0x8e, 0xe3, 0x44,
	0x14, 0xc5, 0xaf, 0xd8, 0xbe, 0x4e, 0x9a, 0xa2, 0x66, 0x16, 0xe6, 0xa1, 0xc6, 0x44, 0xa3, 0x91,
	0x15, 0xa1, 0x66, 0xd4, 0x62, 0xc1, 0x0a, 0x29, 0x89, 0x3d, 0x60, 0x91, 0xa4, 0x87, 0x6a, 0x47,
	0x30, 0x2b, 0xcb, 0x1d, 0x57, 0x0f, 0x56, 0x3b, 0x71, 0xda, 0xe5, 0xf4, 0x4c, 0xf8, 0x12, 0xc4,
	0x96, 0xbf, 0xe0, 0x07, 0x60, 0xc9, 0x27, 0xa0, 0xe6, 0x47, 0x50, 0xdd, 0x72, 0x42, 0x8f, 0x60,
	0xc9, 0xca, 0xe7, 0x9e, 0x73, 0xaa, 0x7c, 0xeb, 0xdc, 0x2a, 0x18, 0xac, 0xb9, 0x10, 0xf9, 0x2b,
	0x7e, 0xb6, 0x6d, 0xea, 0xb6, 0xa6, 0x16, 0x7e, 0x86, 0x3f, 0x1b, 0xe0, 0xc5, 0x9b, 0xb6, 0xd9,
	0x7f, 0xcd, 0xf3, 0x82, 0x37, 0xf4, 0x19, 0x3c, 0x6e, 0xb7, 0xe5, 0x96, 0x67, 0x9d, 0x3b, 0xab,
	0xaf, 0xaf, 0x05, 0x6f, 0x7d, 0x2d, 0xd0, 0x42, 0x83, 0x51, 0xd4, 0xe6, 0x4a, 0xba, 0x40, 0x85,
	0x3e, 0x81, 0x93, 0xa2, 0x59, 0x1d, 0xfd, 0x65, 0xe1, 0xeb, 0x81, 0x16, 0x9a, 0xac, 0x5f, 0x34,
	0xab, 0xce, 0x99, 0x14, 0xf4, 0x23, 0x70, 0xdb, 0x72, 0xcd, 0x45, 0x9b, 0xaf, 0xb7, 0xbe, 0x11,
	0xe8, 0xa1, 0xc1, 0xfe, 0x21, 0xe8, 0x08, 0xde, 0x13, 0xf5, 0xae, 0x59, 0xf1, 0x6c, 0x55, 0xed,
	0x44, 0xcb, 0x1b, 0xb9, 0x8d, 0x15, 0xe8, 0xa1, 0xc9, 0xde, 0x55, 0xc2, 0x54, 0xf1, 0x49, 0x41,
	0x3f, 0x04, 0x57, 0xf0, 0xe6, 0x4e, 0x79, 0x7a, 0x81, 0x1e, 0x0e, 0x98, 0xa3, 0x88, 0xa4, 0xa0,
	0x8f, 0xc0, 0x2a, 0x56, 0x52, 0xb0, 0x51, 0x30, 0x8b, 0x55, 0x52, 0xd0, 0x4f, 0x81, 0x8a, 0x36,
	0x6f, 0xda, 0x8c, 0xbf, 0xe1, 0xab, 0x5d, 0xcb, 0x33, 0xf9, 0x63, 0xdf, 0x09, 0xb4, 0x70, 0xc0,
	0x08, 0x2a, 0xb1, 0x12, 0xd2, 0x72, 0xcd, 0xe9, 0x07, 0xe0, 0x14, 0x79, 0x9b, 0x5f, 0xe5, 0x82,
	0xfb, 0x6e, 0xa0, 0x85, 0x2e, 0x3b, 0xd6, 0xf4, 0x31, 0x58, 0x6d, 0x7e, 0x55, 0x71, 0x1f, 0x50,
	0x50, 0x05, 0xfd, 0x0c, 0x80, 0xcb, 0x08, 0xb3, 0x76, 0xbf, 0xe5, 0xbe, 0x17, 0xe8, 0xe1, 0xc9,
	0x39, 0x51, 0x31, 0x9f, 0x61, 0xb6, 0xe9, 0x7e, 0xcb, 0x99, 0xcb, 0x0f, 0x90, 0x3e, 0x05, 0xbb,
	0xdc, 0x14, 0xfc, 0x0d, 0x17, 0x7e, 0x3f, 0x30, 0x42, 0xef, 0xbc, 0xdf, 0xb9, 0x13, 0xc9, 0xb2,
	0x83, 0x38, 0xfc, 0x12, 0x2c, 0x64, 0x28, 0x05, 0x73, 0x93, 0xaf, 0xb9, 0xaf, 0x05, 0x7a, 0xe8,
	0x32, 0xc4, 0xf4, 0x13, 0xe8, 0xaf, 0xea, 0x6a, 0xb7, 0xde, 0x64, 0x68, 0xf7, 0xf5, 0xc0, 0x08,
	0x2d, 0xe6, 0x29, 0x0e, 0x97, 0x0d, 0x5f, 0x82, 0x85, 0xff, 0xa7, 0x23, 0xe8, 0xfd, 0x80, 0xf3,
	0xc5, 0x1d, 0xbc, 0x73, 0xfa, 0xb0, 0x3b, 0x35, 0x79, 0xd6, 0x39, 0xe8, 0x13, 0x30, 0xaf, 0xea,
	0x62, 0xef, 0xeb, 0xe8, 0x7c, 0xeb, 0x1c, 0x93, 0xba, 0xd8, 0x33, 0x54, 0x87, 0x3f, 0x82, 0x7b,
	0xa4, 0xe8, 0x08, 0x9c, 0xa6, 0x7e, 0x2d, 0x53, 0x12, 0xbe, 0x86, 0x07, 0x3a, 0xe9, 0x96, 0xb1,
	0xfa, 0x75, 0x94, 0xb7, 0x39, 0x3b, 0xea, 0x18, 0xd6, 0x1d, 0xdf, 0xb4, 0x2a, 0x2c, 0xfd, 0xed,
	0xb0, 0xa4, 0xd0, 0x85, 0x75, 0x80, 0x94, 0x80, 0x21, 0x6e, 0x2b, 0xdf, 0xc0, 0xc4, 0x25, 0x1c,
	0xde, 0x80, 0xdd, 0xed, 0x4b, 0x9f, 0x41, 0xff, 0x8a, 0x5f, 0xd7, 0x0d, 0xcf, 0xca, 0x75, 0xfe,
	0x8a, 0x77, 0x7f, 0x1f, 0x74, 0xfb, 0x4d, 0x31, 0x0b, 0xe6, 0x29, 0x4b, 0x22, 0x1d, 0xf4, 0x0c,
	0xbc, 0xfc, 0x1a, 0x6f, 0x18, 0x2e, 0xd0, 0xff, 0x6b, 0x01, 0xa0, 0x03, 0xfd, 0xc3, 0xdf, 0x34,
	0xe8, 0x29, 0x5a, 0x4e, 0x5f, 0x45, 0x2d, 0x43, 0xb4, 0x98, 0x2a, 0x8e, 0xb3, 0xd1, 0x1f, 0xcc,
	0xe6, 0x11, 0x58, 0xa5, 0xc8, 0xb6, 0x37, 0xd8, 0xb5, 0xc3, 0xcc, 0x52, 0xbc, 0xb8, 0xa1, 0x3e,
	0xd8, 0xbb, 0x6d, 0x91, 0xb7, 0xbc, 0xf0, 0x4d, 0xa4, 0x0f, 0x25, 0xfd, 0x18, 0xbc, 0x52, 0x64,
	0x9b, 0x5d, 0x55, 0xe1, 0xe5, 0xb2, 0x50, 0x85, 0x52, 0x2c, 0x3a, 0x06, 0xff, 0xb1, 0xab, 0x2a,
	0xbc, 0xee, 0x0e, 0x43, 0x4c, 0xdf, 0x07, 0x47, 0xdc, 0x56, 0x2a, 0x46, 0x1b, 0xc3, 0xb1, 0xc5,
	0x6d, 0x85, 0x91, 0x3d, 0x06, 0xeb, 0x2e, 0xaf, 0x76, 0xea, 0x8e, 0xbb, 0x4c, 0x15, 0xc3, 0x5f,
	0x34, 0xb0, 0xbb, 0x07, 0xf9, 0x3f, 0x3d, 0x73, 0xfd, 0x5f, 0xcf, 0xfc, 0x29, 0x98, 0xd8, 0x90,
	0x81, 0x73, 0x3d, 0x5c, 0xb3, 0x4e, 0xc7, 0xc9, 0xa2, 0x2e, 0xb3, 0xd8, 0xe6, 0xfb, 0xaa, 0xce,
	0x65, 0x16, 0x7a, 0xd8, 0x67, 0x87, 0x72, 0xf4, 0xab, 0x06, 0xee, 0xf1, 0x1e, 0x50, 0x0f, 0xec,
	0xe5, 0xe2, 0x9b, 0xc5, 0xc5, 0x77, 0x0b, 0xa2, 0x51, 0x80, 0x5e, 0xb2, 0xb8, 0x8c, 0x59, 0x4a,
	0x74, 0x89, 0x97, 0x2f, 0xa2, 0x71, 0x1a, 0x13, 0x43, 0xe2, 0x28, 0x9e, 0xc5, 0x69, 0x4c, 0x4c,
	0x89, 0x59, 0xbc, 0x18, 0xcf, 0x63, 0x62, 0x51, 0x17, 0xac, 0xf1, 0x2c, 0x8d, 0x19, 0xe9, 0x49,
	0x7a, 0x9a, 0x2c, 0xa2, 0xf8, 0x7b, 0x62, 0xa3, 0x5d, 0x61, 0x07, 0xf9, 0x74, 0x3c, 0x99, 0xc5,
	0xc4, 0x45, 0x5e, 0x61, 0x90, 0x4b, 0xbf, 0x5d, 0xc6, 0xec, 0x25, 0xf1, 0xe8, 0x00, 0xdc, 0x69,
	0x34, 0x4e, 0xc7, 0x93, 0xf1, 0x65, 0x4c, 0xfa, 0xb2, 0x8c, 0x8e, 0xe5, 0x80, 0xf6, 0xc1, 0x49,
	0xd9, 0x72, 0x31, 0x95, 0x9d, 0x9c, 0x8c, 0x3e, 0xef, 0x5e, 0x05, 0xf6, 0xee, 0x82, 0x35, 0x89,
	0xbf, 0x4a, 0xba, 0xce, 0xa7, 0x17, 0xf3, 0x79, 0x22, 0x3b, 0xb7, 0xc1, 0x88, 0xe6, 0x33, 0x62,
	0x20, 0x88, 0x66, 0xc4, 0x1c, 0x7d, 0x01, 0xde, 0x83, 0x84, 0xa8, 0x03, 0xe6, 0xf3, 0xe5, 0x6c,
	0x46, 0x34, 0xb9, 0xc3, 0xf3, 0x84, 0x5d, 0x76, 0xe7, 0x9d, 0x27, 0x51, 0x34, 0x93, 0xe7, 0x75,
	0xc0, 0x9c, 0x8d, 0x2f, 0x53, 0x62, 0x4e, 0xc8, 0xef, 0xf7, 0xa7, 0xda, 0x1f, 0xf7, 0xa7, 0xda,
	0x9f, 0xf7, 0xa7, 0xda, 0x4f, 0x7f, 0x9d, 0xbe, 0xf3, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98,
	0x35, 0x93, 0x29, 0xe6, 0x05, 0x00, 0x00,
}
